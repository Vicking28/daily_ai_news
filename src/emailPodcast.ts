import nodemailer, { Transporter } from 'nodemailer';
import dotenv from 'dotenv';
import { fetchAllFeeds } from './rssFetcher';
import { generatePodcastScriptFromSelected } from './podcastGenerator';
import { selectTopArticles, buildBulletHtmlFromSelected } from './selectArticles';
import { synthesizePodcast, getMP3Duration, formatDuration } from './tts';
import { logProcessStart, logSuccess, logError, logInfo, logNewsCollection, logPodcastGeneration, logAudioSynthesis, logEmailSent } from './logger';
import { Article } from './types';

// Load environment variables
dotenv.config();

/**
 * Creates and returns a configured nodemailer transporter
 */
export function createTransporter(): Transporter {
  // Validate required environment variables
  const requiredVars = ['EMAIL_USER', 'EMAIL_PASS'];
  const missingVars = requiredVars.filter(varName => !process.env[varName]);

  if (missingVars.length > 0) {
    throw new Error(
      `Missing required environment variables: ${missingVars.join(', ')}\n` +
      'Please check your .env file and ensure all required variables are set.'
    );
  }

  return nodemailer.createTransport({
    host: process.env.SMTP_HOST || 'smtp.gmail.com',
    port: parseInt(process.env.SMTP_PORT || '587', 10),
    secure: parseInt(process.env.SMTP_PORT || '587', 10) === 465,
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
  });
}


/**
 * Gets email recipients from environment variables
 * Supports both single email and comma-separated list
 */
export function getEmailRecipients(): string[] {
  // Check for EMAIL_RECIPIENTS first (comma-separated list)
  if (process.env.EMAIL_RECIPIENTS) {
    const recipients = process.env.EMAIL_RECIPIENTS
      .split(',')
      .map(email => email.trim())
      .filter(email => email.length > 0);
    
    if (recipients.length > 0) {
      return recipients;
    }
  }

  // Fallback to EMAIL_TO (could be single email or comma-separated list)
  if (process.env.EMAIL_TO) {
    const recipients = process.env.EMAIL_TO
      .split(',')
      .map(email => email.trim())
      .filter(email => email.length > 0);
    
    if (recipients.length > 0) {
      return recipients;
    }
  }

  // Default fallback
  return ['zlatnikvince@gmail.com'];
}


/**
 * Generates HTML email content with selected articles
 * @param selectedArticles - Array of articles that were selected for the podcast
 * @param scriptLength - Length of the generated script
 * @param actualDuration - Actual duration of the MP3 file in seconds
 * @returns HTML email content
 */
export function generateEmailContent(selectedArticles: Article[], scriptLength: number, actualDuration: number): string {
  const bulletpointHtml = buildBulletHtmlFromSelected(selectedArticles, 10);

  return `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <h2 style="color: #333; border-bottom: 2px solid #007acc; padding-bottom: 10px;">
        üéôÔ∏è Daily AI News Podcast
      </h2>
      
      <p style="font-size: 16px; line-height: 1.6; color: #555;">
        Good morning, 49x team! Here's your daily dose of AI and technology news, curated and transformed into an engaging podcast format to keep you updated on the latest developments in AI coding and technology.
      </p>
      
      <h3 style="color: #333; margin-top: 30px;">üì∞ Today's Top News:</h3>
      ${bulletpointHtml}
      
      <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 30px 0;">
        <h3 style="color: #333; margin-top: 0;">üéß Your Podcast is Ready!</h3>
        <p style="margin-bottom: 10px; color: #555;">
          <strong>üìù Script Length:</strong> ${scriptLength} characters<br>
          <strong>‚è±Ô∏è Listen Duration:</strong> ${formatDuration(actualDuration)}
        </p>
        <p style="color: #555; margin-bottom: 0;">
          Attached you'll find both the full podcast script (podcast.txt) and the audio file (podcast.mp3) 
          generated using AI-powered text-to-speech technology.
        </p>
      </div>
      
      <div style="border-top: 1px solid #eee; padding-top: 20px; margin-top: 30px; text-align: center; color: #888; font-size: 12px;">
        <p>Generated by Daily AI News ‚Ä¢ Powered by OpenAI & Deepgram</p>
        <p>üìÖ ${new Date().toLocaleDateString('en-US', { 
          weekday: 'long', 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric' 
        })}</p>
      </div>
    </div>
  `;
}

/**
 * Sends a daily AI podcast email with attachments using two-pass pipeline
 * @param recipients - Optional array of email addresses to send to (defaults to EMAIL_RECIPIENTS from .env)
 */
export async function sendDailyPodcastEmail(recipients?: string[]): Promise<void> {
  console.log('üìß Starting daily AI podcast email generation...\n');
  await logProcessStart('Daily AI podcast email generation');

  // Generate timestamp for all files
  const timestamp = new Date().toISOString().split('T')[0]; // YYYY-MM-DD

  try {
    // PASS A: Article Selection
    console.log('üì° Step 1: Fetching RSS feeds...');
    const allArticles = await fetchAllFeeds();
    console.log(`‚úÖ Fetched ${allArticles.length} articles from RSS feeds\n`);
    await logNewsCollection(allArticles.length, 12); // Assuming 12 RSS sources

    console.log('üîç Step 2: Selecting top AI articles...');
    const { selectedIds } = await selectTopArticles(allArticles, { maxCount: 18 });
    const selectedArticles = allArticles.filter(article => selectedIds.includes(article.id));
    console.log(`‚úÖ Selected ${selectedArticles.length} articles for podcast\n`);
    await logInfo(`Selected ${selectedArticles.length} articles from ${allArticles.length} total articles`);

    // PASS B: Podcast Generation
    console.log('ü§ñ Step 3: Generating podcast script from selected articles...');
    const script = await generatePodcastScriptFromSelected(selectedArticles);
    console.log(`‚úÖ Generated script: ${script.length} characters\n`);
    const wordCount = script.split(' ').length;
    await logPodcastGeneration(script.length, wordCount);

    // Step 4: Generate audio file in memory
    console.log('üé§ Step 4: Converting script to speech...');
    const audioBuffer = await synthesizePodcast(script);
    console.log(`‚úÖ Generated audio buffer: ${audioBuffer.length} bytes\n`);

    // Step 5: Get actual MP3 duration
    console.log('‚è±Ô∏è Getting actual MP3 duration...');
    let actualDuration: number;
    let fileSize: string;
    try {
      actualDuration = await getMP3Duration(audioBuffer);
      fileSize = `${(audioBuffer.length / 1024).toFixed(0)} KB`;
      console.log(`‚úÖ Actual duration: ${formatDuration(actualDuration)}, File size: ${fileSize}\n`);
    } catch (error) {
      console.log('‚ö†Ô∏è Could not get actual duration, using estimation...');
      // Fallback to estimation
      actualDuration = Math.round(script.length / 2.5);
      fileSize = `${(audioBuffer.length / 1024).toFixed(0)} KB`;
      console.log(`üìä Estimated duration: ${formatDuration(actualDuration)}\n`);
    }

    await logAudioSynthesis(formatDuration(actualDuration), fileSize);

    // Step 6: Prepare script text (no file saving needed)
    console.log('üìù Step 5: Preparing podcast script for email...');
    console.log(`‚úÖ Script prepared for email attachment\n`);

    // Step 7: Prepare email content with selected articles
    console.log('üìß Step 6: Preparing email content...');
    const htmlContent = generateEmailContent(selectedArticles, script.length, actualDuration);

    // Step 8: Determine recipients
    const emailRecipients = recipients || getEmailRecipients();
    console.log(`üìß Sending to ${emailRecipients.length} recipient(s): ${emailRecipients.join(', ')}`);

    // Step 9: Send email
    console.log('üì§ Step 7: Sending email...');
    const transporter = createTransporter();

    // Verify connection configuration
    await transporter.verify();
    console.log('‚úÖ SMTP server connection verified');

    // Send email with in-memory attachments
    const info = await transporter.sendMail({
      from: `"Daily AI News" <${process.env.EMAIL_USER}>`,
      to: emailRecipients[0], // Primary recipient
      bcc: emailRecipients.slice(1), // BCC for additional recipients
      subject: 'Daily AI News Podcast',
      html: htmlContent,
      attachments: [
        {
          filename: `podcast_${timestamp}.txt`,
          content: script,
          contentType: 'text/plain',
        },
        {
          filename: `podcast_${timestamp}.mp3`,
          content: audioBuffer,
          contentType: 'audio/mpeg',
        },
      ],
    });

    console.log('‚úÖ Daily AI podcast email sent successfully!');
    console.log('üìß Message ID:', info.messageId);
    console.log('üì¨ Preview URL:', nodemailer.getTestMessageUrl(info));
    await logEmailSent(emailRecipients.length, info.messageId || 'Unknown');

    // No cleanup needed since we're using in-memory attachments

  } catch (error) {
    console.error('‚ùå Failed to send daily podcast email:', error);
    
    // Log error to Discord with user mention
    const errorMessage = error instanceof Error ? error.message : String(error);
    await logError(`Failed to send daily podcast email: ${errorMessage}`);
    
    if (error instanceof Error) {
      if (error.message.includes('EMAIL_USER') || error.message.includes('EMAIL_PASS')) {
        console.log('\nüí° Tip: Make sure to add your email credentials to the .env file');
      } else if (error.message.includes('OPENAI_API_KEY')) {
        console.log('\nüí° Tip: Make sure to add your OpenAI API key to the .env file');
      } else if (error.message.includes('DEEPGRAM_API_KEY')) {
        console.log('\nüí° Tip: Make sure to add your Deepgram API key to the .env file');
      }
    }
    
    throw error;
  }
}
